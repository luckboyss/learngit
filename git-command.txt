设置用户名和邮箱
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

显示当前目录
pwd

创建目录
mkdir

转到目录
cd

删除文件
rm <file>

初始化一个Git仓库
git init

添加文件
git add <file>

提交文件
git commit -m <message>

显示工作区状态
git status

查看工作区和当前版本的区别
git diff

查看工作区和版本库里最新版本的区别
git diff HEAD  --<file>

跳转到版本
git reset --hard HEAD^（上个版本）
git reset --hard HEAD~100（前100个版本）
git reset --hard commit_id

查看提交历史(回到过去)
git log
git log --pretty=oneline
git log --graph --pretty=oneline --abbrev-commit

查看命令历史（回到未来）
git reflog

丢弃工作区的修改内容
git checkout -- <file>

丢弃暂存区修改内容，回退到工作区
git reset HEAD <file>

从版本库删除文件
git rm

创建SSH Key
ssh-keygen -t rsa -C "youremail@example.com"
(创建后主目录下有.ssh目录，里有id_rsa和id_rsa.pub文件)

关联一个远程库
git remote add origin git@server-name:path/repo-name.git

解除关联一个远程库
git remote rm origin

第一次推送master分支的所有内容
git push -u origin master

普通推送
git push origin master

从远程克隆一个到本地库
git clone git@server-name:path/repo-name.git

查看分支
git branch

创建分支
git branch <name>

切换分支
git checkout <name>

创建+切换分支
git checkout -b <name>

合并某分支到当前分支
git merge <name>(ff 快速合并)
git merge --no-ff <name>(普通合并)

删除分支
git branch -d <name>

强制删除分支
git branch -D <name>

暂存工作区
git stash

查看暂存列表
git stash list

恢复工作区，不删除stash
git stash apply [stash@{0}]

恢复工作区，并删除stash
git stash pop

删除stash
git stash drop

查看远程库信息
git remote -v

从本地推送分支
git push origin branch-name

抓取远程的新提交
git pull

建立本地分支和远程分支的关联
git branch --set-upstream branch-name origin/branch-name

在本地创建和远程分支对应的分支
git checkout -b branch-name origin/branch-name

从远程抓取分支
git pull

改变提交历史为一条直线
git rebase

新建一个标签，默认HEAD,可以指定commit ID
git tag <tagname> commit ID

创建并指定标签信息
git tag -a <tagname> -m "blablabla..."

查看所有标签
git tag

推送一个本地标签
git push origin <tagname>

推送全部未推送过的本地标签
git push origin --tags

删除一个本地标签
git tag -d <tagname>

删除一个远程标签
git push origin :ref/tags/<tagname>
